# -*- coding: utf-8 -*-
"""LVADSUSR73_Ashutosh_Q4_Anamoly.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/181Dho38Xyl-_U6Tskds9vfumxJ9S36Q9
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler, LabelEncoder

data = pd.read_csv('/content/social_network.csv')

data.info()

data.head()

data.isnull().sum()

data.duplicated().sum()

data['account_creation_date'] = pd.to_datetime(data['account_creation_date'])

plt.figure(figsize=(18, 5))
features = ['login_activity', 'posting_activity', 'social_connections']
for i, feature in enumerate(features, 1):
    plt.subplot(1, 3, i)
    sns.histplot(data=data, x=feature, kde=True)
    plt.title(f'{feature} Distribution')
plt.tight_layout()
plt.show()

print("Summary Statistics:")
print(data.describe())

sns.pairplot(data)

categorical_cols = data.select_dtypes(include=['object']).columns.tolist()

for col in categorical_cols:
    data[col] = label_encoder.fit_transform(data[col])

X = data[features]

model = IsolationForest(n_estimators=100, contamination='auto', random_state=42)
predictions = model.fit_predict(X)

data['anomaly_score'] = model.decision_function(X)
data['is_anomaly'] = predictions
data['is_anomaly'] = data['is_anomaly'].apply(lambda x: 1 if x == -1 else 0)

print(data.head())
print(data['is_anomaly'].value_counts())

plt.figure(figsize=(10, 6))
sns.histplot(data=data, x='anomaly_score', hue='is_anomaly', element='step', palette='viridis')
plt.title('Distribution of Anomaly Scores')
plt.xlabel('Anomaly Score')
plt.ylabel('Count')
plt.show()

from sklearn.decomposition import PCA
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)

plt.figure(figsize=(10, 6))
sns.scatterplot(x=X_pca[:, 0], y=X_pca[:, 1], hue=data['is_anomaly'], palette='viridis', style=data['is_anomaly'], s=100)
plt.title('Anomaly Visualization with PCA')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.legend(title='Anomaly', labels=['Normal', 'Anomaly'])
plt.show()